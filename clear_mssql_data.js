const sql = require('mssql');
const logger = require('./src/utils/logger');

// MSSQL Configuration
const config = {
    server: process.env.DB_SERVER || '45.136.253.81',
    port: parseInt(process.env.DB_PORT) || 1433,
    database: process.env.DB_DATABASE || 'OrgStructureDB',
    user: process.env.DB_USER || 'sa',
    password: process.env.DB_PASSWORD || '@Rc9988!Sql',
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000
    },
    options: {
        encrypt: false,
        trustServerCertificate: true,
        enableArithAbort: true
    }
};

async function clearAllData() {
    let pool;
    
    try {
        console.log('üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô MSSQL...');
        console.log(`üì° ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${config.server}:${config.port}/${config.database}`);
        
        // Connect to MSSQL
        pool = await sql.connect(config);
        console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MSSQL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // Use the target database
        await pool.request().query(`USE [${config.database}]`);
        console.log(`‚úÖ ‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${config.database}`);
        
        // Clear all tables in correct order (respecting foreign key constraints)
        const clearQueries = [
            'DELETE FROM Departments',
            'DELETE FROM Divisions', 
            'DELETE FROM Branches',
            'DELETE FROM Companies',
            'DELETE FROM API_Keys',
            'DELETE FROM API_Logs'
        ];
        
        for (const query of clearQueries) {
            try {
                const result = await pool.request().query(query);
                const tableName = query.replace('DELETE FROM ', '');
                console.log(`‚úÖ ‡∏•‡∏ö ${tableName} ‡πÅ‡∏•‡πâ‡∏ß (${result.rowsAffected[0]} rows)`);
            } catch (error) {
                const tableName = query.replace('DELETE FROM ', '');
                console.log(`‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableName}: ${error.message}`);
            }
        }
        
        console.log('\nüéâ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MSSQL ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        throw error;
    } finally {
        if (pool) {
            await pool.close();
            console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MSSQL ‡πÅ‡∏•‡πâ‡∏ß');
        }
    }
}

// Run the clear function
clearAllData()
    .then(() => {
        console.log('‚ú® ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        process.exit(0);
    })
    .catch((error) => {
        console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
        process.exit(1);
    });